//AppWrapper
import React, { useState } from "react";

import App from "./App";

import { AuthContext } from "./context/authContext";

import { AuthContextObj_i } from "./utils/interfaces";

/* interface Props {
  globalSettings: SettingsDatabase_i;
} */

function AppWrapper({}): JSX.Element {
  const [authContext, setAuthContext] = useState<AuthContextObj_i>({
    isAuthenticated: false,
    authenticatedUserId: null,
    accessToken: null,
    loginNotification: null,
    loginErrorMessage: null,
  });

  let authValue = {
    isAuthenticated: authContext.isAuthenticated,
    authenticatedUserId: authContext.authenticatedUserId,
    accessToken: authContext.accessToken,
    loginNotification: authContext.loginNotification,
    loginErrorMessage: authContext.loginErrorMessage,
    updateAuthContext: setAuthContext,
  };

  return (
    <AuthContext.Provider value={authValue}>
      <App />
    </AuthContext.Provider>
  );
}

export default AppWrapper;



=================//testMutation

const graphql = require("graphql");

===============// const Bookmark = require("../../mongoModels/bookmarkSchema");

/* import {
  BookmarkFields,
  BookmarkType,
  BookmarkDatabase_i,
} from "../types/bookmarkType"; */

import { TestMutationField, TestMutationType } from "../types/testMutationType";

export const testMutationField = {
  type: TestMutationType,
  args: {
    ...TestMutationField,
  },
  //   resolve(_source: unknown, args: {stringToAdd: string}) {
  resolve(rootValue: any) {
    // see commented out middleware in server.js before /graphql endpoint
    console.log(rootValue.request.customKey);
  },
};

=================// client graphql
export const TestMutation = `
  mutation (
    $stringToAdd: String,
    ) {
    testMutation (stringToAdd: $stringToAdd, 
      
        ) {
         stringToAdd
    }
  }
`;

====================// testtMutationType

import { GraphQLString, GraphQLObjectType } from "graphql";

export const TestMutationField = {
  stringToAdd: { type: GraphQLString },
};

export const TestMutationType = new GraphQLObjectType({
  name: "testMutation",
  fields: () => ({
    ...TestMutationField,
  }),
});


===================// server.ts

const faviconFetch = require("favicon-fetch");

app.get("/favicon/:faviconUrl", (req: Request, res: Response) => {
  console.log("getting favicon");

  let fetchFavicon = faviconFetch({
    uri: `${decodeURIComponent(req.params.faviconUrl)}`,
  });
  // console.log(fetchFavicon);

  if (fetchFavicon) {
    res.status(201).json({
      favicon: fetchFavicon,
    });
    return;
  }

  res.status(500).json({
    error: "No favicon available",
  });
});


// for testing only
export const testUserId = "61b21a61cc1846bfa9ca8a8e"


==================//server.ts

// app.post(
//   "/background_img/:userId",
//   // upload.single("backgroundImg"),
//   (req: any, res: Response) => {
//     // console.log("POST req.isAuth POST");
//     // console.log(req.isAuth);

//     const authHeader = req.get("Authorization");
//     // console.log(req.headers);
//     // const authHeader = req.headers.authorisation;

//     console.log("POST authHeader POST");
//     console.log(authHeader);
//     // console.log("req.headers backgroundImg");
//     // console.log(req.headers);
//     // const authHeader = req.headers.authorisation;

//     backgroundImgUpload(req, res, function (multerErr) {
//       if (multerErr) {
//         if (multerErr instanceof multer.MulterError) {
//           res.send({ error: multerErr.message });
//           return;
//         }
//         // res.status(500).send({error: multerErr})
//         // res.send(multerErr);
//         res.send({ error: "Only .jpg and .png files are accepted" });

//         return;
//       }

//       let newBackgroundImg = {
//         // userId: userIdOrDemoId,
//         userId: req.params.userId,
//         backgroundImg: req.file.path,
//       };

//       BackgroundImgSchema.replaceOne(
//         // { userId: userIdOrDemoId },
//         { userId: req.params.userId },
//         newBackgroundImg,
//         { upsert: true },
//         (err: Error, backgroundImgProduct: BackgroundImg) => {
//           if (err) {
//             console.log(err);
//             res.status(500).json({
//               error: err,
//             });

//             removeBackgroundImg(newBackgroundImageName, req.params.userId);
//             return;
//           }

//           // let dest = "backgroundImgs/" + userIdOrDemoId + "/";
//           let dest = "backgroundImgs/" + req.params.userId + "/";

//           fs.readdirSync(dest).forEach((file: string) => {
//             // console.log(file);

//             if (file !== newBackgroundImageName) {
//               removeBackgroundImg(file, req.params.userId);
//             }
//           });

//           res.status(201).json({
//             message: "Created product successfully",
//             createdProduct: backgroundImgProduct,
//           });
//           // res.send(backgroundImgProduct)
//           // res.send({message: "done"})
//           // res.statusMessage = backgroundImgProduct.backgroundImg
//           // res.send("aaaaaaaaaaaaaaaaaaaaa");
//         }
//       );

//       // console.log(req);
//       // console.log(req.file.path);

//       /* let newBackgroundImg = new BackgroundImg({
//       userId: testUserId,
//       backgroundImg: req.file.path,
//     }); */
//     });
//   }
// );